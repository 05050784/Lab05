//CHECK POINT 1
#include <Keypad.h>
const byte ROWS = 4; // 4 Rows
const byte COLS = 4; // 4 Columns
char keys[ROWS][COLS] = {
{'F', 'B', 'A', '0'}, {'E','3','2', '1'},
{'D', '6', '5', '4'}, {'C', '9', '8', '7'}
};
//byte rowPins[ROWS] = {2, 3, 4, 5};
//byte colPins[COLS] = {6, 7, 8, 9};
byte rowPins[ROWS] = {5, 4, 3, 2};
byte colPins[COLS] = {11, 10, 9, 8};
Keypad keypad =Keypad( makeKeymap(keys), rowPins,
colPins, ROWS, COLS );

void setup() 
{
  Serial.begin(9600);
  Serial.println("Start");
}

void loop() 
{
  char key;
  key=keypad.getKey();
  //while ( (key = keypad.getKey() ) == NO_KEY);
  
  if (key != NO_KEY)
  {
    Serial.println(key);
  }
}
//CHECK POINT 2
#include <Keypad.h>
#include "SevSeg.h"
SevSeg sevseg;
const byte ROWS = 4; // 4 Rows
const byte COLS = 4; // 4 Columns
char keys[ROWS][COLS] = {
{'F', 'B', 'A', '0'}, {'E','3','2', '1'},
{'D', '6', '5', '4'}, {'C', '9', '8', '7'}
};
//byte rowPins[ROWS] = {2, 3, 4, 5};
//byte colPins[COLS] = {6, 7, 8, 9};
byte rowPins[ROWS] = {5, 4, 3, 2};
byte colPins[COLS] = {11, 10, 9, 8};
byte numDigits = 1;
byte digitPins[] = {2};
byte segmentPins[] = {6, 7, 12, 13, 14, 15, 16, 17};
const byte num[10]=
{ B00111111, B00000110, B01011011, B01001111, B01100110,
 B01101101, B01111101, B00000111, B01111111, B01101111};
byte i,j;
const int seg[]={6,7,12,13,14,15,16,17}; 
Keypad keypad =Keypad( makeKeymap(keys), rowPins,
colPins, ROWS, COLS );

void setup() 
{
  Serial.begin(9600);
  Serial.println("Start");
  sevseg.begin(COMMON_ANODE, numDigits, digitPins,
  segmentPins);
    pinMode(6,OUTPUT);
    pinMode(7,OUTPUT);
    pinMode(12,OUTPUT);
    pinMode(13,OUTPUT);
    pinMode(14,OUTPUT);
    pinMode(15,OUTPUT);
    pinMode(16,OUTPUT);
    pinMode(17,OUTPUT);
}

void loop() 
{
  char key;
  key=keypad.getKey();
  //while ( (key = keypad.getKey() ) == NO_KEY);
  int o;
  if (key != NO_KEY)
  {
        o=key-48;
        Serial.println(key);
        for(j=0;j<8;j++)
        {
          if (bitRead(num[o],j))
              digitalWrite(seg[j],HIGH);
          else
              digitalWrite(seg[j],LOW);
        }
  }
} 
